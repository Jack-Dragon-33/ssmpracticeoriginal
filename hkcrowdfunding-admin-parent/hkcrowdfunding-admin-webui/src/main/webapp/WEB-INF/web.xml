<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">
    <context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>classpath:spring/spring-persist*.xml</param-value>
    </context-param>
    <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>
    <filter>
        <filter-name>CharacterEcodingFilter</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <init-param>
            <param-name>encoding</param-name>
            <param-value>utf-8</param-value>
        </init-param>
        <init-param>
            <param-name>forceRequestEncoding</param-name>
            <param-value>true</param-value>
        </init-param>
        <init-param>
            <param-name>forceResponseEncoding</param-name>
            <param-value>true</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>CharacterEcodingFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>
    <filter>
        <filter-name>HiddenHttpMethodFilter</filter-name>
        <filter-class>org.springframework.web.filter.HiddenHttpMethodFilter</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>HiddenHttpMethodFilter</filter-name>
        <url-pattern>/</url-pattern>
    </filter-mapping>
    <servlet>
        <servlet-name>DispatcherServlet</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:spring/spring-web-mvc.xml</param-value>
        </init-param>
<!--        Servlet的生命周期中，创建对象默认是第一次接受到请求时-->
<!--        而DispatcherServlet创建对象后有大量的“框架初始化操作”的工作，不适合默认的创建时机-->
<!--        设置load-on-startup是为了让DispatcherServlet在web应用启动时创建对象初始化-->
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>DispatcherServlet</servlet-name>
<!--        *.html 扩展名-->
<!--        作用：伪静态-->
<!--        表面上看起来是一个访问静态资源的请求，但是实际上是由 SpringMVC-->
<!--        交给 handler 来处理的动态资源。-->
<!--         好处 1：有利于 SEO 优化-->
<!--        让搜索引擎更容易找到我们的网站，有利于网站的推广-->
<!--         好处 2：隐藏后端技术实现细节-->
<!--        给黑客入侵系统增加难度-->
<!--         好处 3：自动解决静态资源访问问题-->
<!--        访问 a.png 本身不符合*.html 这个 url-pattern，和 SpringMVC 完全没-->
<!--        有关系，当前请求由 Tomcat 处理。-->
<!--        如 果 url-pattern 映 射 了 “ / ”， 那 么 SpringMVC 中 还 需 要 配 置-->
<!--        DefaultServletHandler。-->
<!--         缺陷：不符合 RESTFUL 风格-->
        <url-pattern>*.html</url-pattern>
<!--        *.json 扩展名-->
<!--        描述问题-->
<!--        请求扩展名 http://localhost:8080/extra01-ajax/get/emp/by/ajax.html-->
<!--        服务器端打算返回的数据：JSON 格式-->
<!--        二者不匹配！ ！！ ！ ！-->
<!--         分析问题-->
<!--        请求扩展名和响应体的数据格式不匹配！！！-->
<!--        解决问题-->
<!--        让请求扩展名和预计的响应体数据格式一致。-->
<!--        http://localhost:8080/extra01-ajax/get/emp/by/ajax.json-->
<!--        同时让 SpringMVC 在映射*.html 扩展名之外再 映射*.json 扩展名，不然会-->
<!--        返回 404-->
        <url-pattern>*.json</url-pattern>
    </servlet-mapping>
    <filter>
        <filter-name>springSecurityFilterChain</filter-name>
        <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>springSecurityFilterChain</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>
</web-app>